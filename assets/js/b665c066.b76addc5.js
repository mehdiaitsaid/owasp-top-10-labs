"use strict";(self.webpackChunkowasp_top_10_labs=self.webpackChunkowasp_top_10_labs||[]).push([[849],{213:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/2-467fc1a235036aa42d517af5a72ec574.png"},1116:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/3-b001add5bb31bf8a0cdc6662fede602a.png"},2281:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/img1-792a60f97dfc9c990dd0eee52a2968d2.png"},2714:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/img-55a62da4b41be490666044ad5f1b2089.png"},2862:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/1-64f9894e3398cd60312be2217f8b0f9a.png"},6785:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>p,frontMatter:()=>r,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"setup","title":"Setup","description":"Introduction","source":"@site/labs/setup.md","sourceDirName":".","slug":"/setup","permalink":"/owasp-top-10-labs/labs/setup","draft":false,"unlisted":false,"editUrl":"https://github.com/mehdiaitsaid/owasp-top-10-labs/blob/master/labs/setup.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"title":"Setup","sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Introduction","permalink":"/owasp-top-10-labs/labs/intro"},"next":{"title":"Broken Access Control","permalink":"/owasp-top-10-labs/labs/broken-access-control"}}');var s=t(4848),a=t(8453);const r={title:"Setup",sidebar_position:2},l="\ud83d\udee0\ufe0f Setup Guide for Security Labs",o={},d=[{value:"Introduction",id:"introduction",level:2},{value:"What is Virtualization?",id:"what-is-virtualization",level:3},{value:"Why Use Virtualization in Security Labs?",id:"why-use-virtualization-in-security-labs",level:3},{value:"Types of Virtualization",id:"types-of-virtualization",level:2},{value:"1. Virtual Machines (VMs)",id:"1-virtual-machines-vms",level:3},{value:"2. Containers",id:"2-containers",level:3},{value:"What We\u2019ll Use in Our Labs",id:"what-well-use-in-our-labs",level:2},{value:"Step 1: Open Microsoft Store",id:"step-1-open-microsoft-store",level:3},{value:"Step 2: Search for Ubuntu",id:"step-2-search-for-ubuntu",level:3},{value:"Step 3: Install Ubuntu",id:"step-3-install-ubuntu",level:3},{value:"Step 4: Launch Ubuntu",id:"step-4-launch-ubuntu",level:3},{value:"Step 5: Verify Installation",id:"step-5-verify-installation",level:3},{value:"Installing Docker on Ubuntu",id:"installing-docker-on-ubuntu",level:2},{value:"Step 1 \u2014 Update Packages",id:"step-1--update-packages",level:3},{value:"Step 2 \u2014 Install Prerequisite Packages",id:"step-2--install-prerequisite-packages",level:3},{value:"Step 3 \u2014 Add Docker GPG Key",id:"step-3--add-docker-gpg-key",level:3},{value:"Step 4 \u2014 Add Docker Repository",id:"step-4--add-docker-repository",level:3},{value:"Step 5 \u2014 Update Package List Again",id:"step-5--update-package-list-again",level:3},{value:"Step 6 \u2014 Install Docker",id:"step-6--install-docker",level:3},{value:"Step 7 \u2014 Verify Docker Installation",id:"step-7--verify-docker-installation",level:3},{value:"Install Docker Compose",id:"install-docker-compose",level:3},{value:"1. Create the Project Directory",id:"1-create-the-project-directory",level:2},{value:"2. Create the PHP Index File",id:"2-create-the-php-index-file",level:2},{value:"3. Create the PHP Dockerfile",id:"3-create-the-php-dockerfile",level:2},{value:"4. Create the .env File",id:"4-create-the-env-file",level:2},{value:"5. Create the docker-compose.yml File",id:"5-create-the-docker-composeyml-file",level:2},{value:"6. Launch the Environment",id:"6-launch-the-environment",level:3},{value:"7. Verify the Setup",id:"7-verify-the-setup",level:2},{value:"8. Stop and Clean Up",id:"8-stop-and-clean-up",level:2},{value:"9. Create the database and dummy data for testing",id:"9-create-the-database-and-dummy-data-for-testing",level:2}];function c(e){const n={a:"a",blockquote:"blockquote",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"\ufe0f-setup-guide-for-security-labs",children:"\ud83d\udee0\ufe0f Setup Guide for Security Labs"})}),"\n",(0,s.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,s.jsxs)(n.p,{children:["Before starting our security labs, it\u2019s essential to create a ",(0,s.jsx)(n.strong,{children:"safe and isolated environment"}),". Security labs often involve intentionally vulnerable applications, so we must ensure everything runs in a ",(0,s.jsx)(n.strong,{children:"controlled space"}),", without risking our personal systems or networks."]}),"\n",(0,s.jsxs)(n.p,{children:["This is where ",(0,s.jsx)(n.strong,{children:"virtualization"})," comes in."]}),"\n",(0,s.jsx)(n.h3,{id:"what-is-virtualization",children:"What is Virtualization?"}),"\n",(0,s.jsxs)(n.p,{children:["Virtualization allows you to run multiple operating systems or applications on a single physical machine in an ",(0,s.jsx)(n.strong,{children:"isolated manner"}),". It enables the creation of virtual machines (VMs) or containers that behave like independent computers."]}),"\n",(0,s.jsx)(n.h3,{id:"why-use-virtualization-in-security-labs",children:"Why Use Virtualization in Security Labs?"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Isolation:"})," Each lab runs in a controlled environment, minimizing risk to your host machine."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Reproducibility:"})," Quickly reset environments if something goes wrong."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Flexibility:"})," Run multiple operating systems and applications without interfering with your main system."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Safety:"})," Vulnerabilities and attacks remain contained."]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"types-of-virtualization",children:"Types of Virtualization"}),"\n",(0,s.jsx)(n.p,{children:"There are two main approaches we can use in our labs:"}),"\n",(0,s.jsx)(n.h3,{id:"1-virtual-machines-vms",children:"1. Virtual Machines (VMs)"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Emulates a full operating system (e.g., Ubuntu running inside Windows)."}),"\n",(0,s.jsx)(n.li,{children:"Examples: VirtualBox, VMware, Hyper-V."}),"\n",(0,s.jsx)(n.li,{children:"Each VM has its own virtual hardware (CPU, memory, disk)."}),"\n",(0,s.jsx)(n.li,{children:"Full isolation but resource-heavy."}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"2-containers",children:"2. Containers"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Lightweight and share the host\u2019s operating system kernel."}),"\n",(0,s.jsx)(n.li,{children:"Faster startup and lower resource usage."}),"\n",(0,s.jsx)(n.li,{children:"Common tool: Docker."}),"\n",(0,s.jsx)(n.li,{children:"Ideal for spinning up databases, web apps, and vulnerable lab environments quickly."}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"what-well-use-in-our-labs",children:"What We\u2019ll Use in Our Labs"}),"\n",(0,s.jsxs)(n.p,{children:["For our labs, we will use ",(0,s.jsx)(n.strong,{children:"containers"})," (with Docker) to build our home lab environment, which includes:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"MySQL"})," (database)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"phpMyAdmin"})," (database management)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"PHP environment"})," (demo hospital application)"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Since Docker works best on ",(0,s.jsx)(n.strong,{children:"Linux"}),", Windows users will need a Linux environment first. There are two options:"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Using a Linux VM"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Install a full Linux virtual machine (Ubuntu recommended)."}),"\n",(0,s.jsxs)(n.li,{children:["If you choose this option, you can find detailed installation guides here:",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.a,{href:"https://github.com/mehdiaitsaid/devops-course",children:"DevOps Course Repo"})]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Using WSL (Windows Subsystem for Linux)"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"WSL allows running Linux directly on Windows without a full VM."}),"\n",(0,s.jsx)(n.li,{children:"It is lighter and easier to set up than a VM."}),"\n",(0,s.jsx)(n.li,{children:"The following sections will guide you through installing WSL and preparing it for Docker."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.p,{children:"WSL allows you to run a full Linux environment directly on Windows without the overhead of a traditional virtual machine. For our security labs, WSL provides a lightweight Linux environment to run Docker and containers."}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["\u26a0\ufe0f Before installing Ubuntu from the Microsoft Store, you must ",(0,s.jsx)(n.strong,{children:"enable WSL"})," via Windows Features:"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Open ",(0,s.jsx)(n.strong,{children:"Control Panel \u2192 Programs \u2192 Turn Windows features on or off"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["Check ",(0,s.jsx)(n.strong,{children:"Windows Subsystem for Linux"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["Optionally, also check ",(0,s.jsx)(n.strong,{children:"Virtual Machine Platform"})," for WSL 2."]}),"\n",(0,s.jsxs)(n.li,{children:["Click ",(0,s.jsx)(n.strong,{children:"OK"})," and restart your computer if prompted."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"1.png",src:t(2862).A+"",width:"1017",height:"769"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.ol,{start:"5",children:["\n",(0,s.jsx)(n.li,{children:"Check the installation"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"img.png",src:t(2281).A+"",width:"1737",height:"322"})}),"\n",(0,s.jsx)(n.h3,{id:"step-1-open-microsoft-store",children:"Step 1: Open Microsoft Store"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Click the ",(0,s.jsx)(n.strong,{children:"Start menu"})," and search for ",(0,s.jsx)(n.strong,{children:"Microsoft Store"}),"."]}),"\n",(0,s.jsx)(n.li,{children:"Open the Microsoft Store app."}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"step-2-search-for-ubuntu",children:"Step 2: Search for Ubuntu"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["In the search bar, type ",(0,s.jsx)(n.strong,{children:"Ubuntu"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["Select the latest ",(0,s.jsx)(n.strong,{children:"Ubuntu LTS"})," version (recommended for stability, e.g., Ubuntu 22.04 LTS)."]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"step-3-install-ubuntu",children:"Step 3: Install Ubuntu"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Click the ",(0,s.jsx)(n.strong,{children:"Install"})," button."]}),"\n",(0,s.jsx)(n.li,{children:"Wait for the installation to complete (this may take a few minutes depending on your internet speed)."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"img.png",src:t(2714).A+"",width:"2191",height:"1351"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"step-4-launch-ubuntu",children:"Step 4: Launch Ubuntu"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Once installed, click ",(0,s.jsx)(n.strong,{children:"Launch"})," in the Microsoft Store or open Ubuntu from the Start menu."]}),"\n",(0,s.jsx)(n.li,{children:"On the first launch, the terminal will initialize the Linux environment."}),"\n",(0,s.jsxs)(n.li,{children:["You will be prompted to create a ",(0,s.jsx)(n.strong,{children:"Linux username and password"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"2.png",src:t(213).A+"",width:"1450",height:"820"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"step-5-verify-installation",children:"Step 5: Verify Installation"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"The Ubuntu terminal should now be ready. You can check the Linux kernel version by typing:"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"uname -a\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsx)(n.li,{children:"You should see output similar to:"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"Linux DESKTOP-XXXXX 5.15.90.1-microsoft-standard-WSL2 #1 SMP ...\n"})}),"\n",(0,s.jsx)(n.p,{children:"Optionally, update your package lists:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"sudo apt update && sudo apt upgrade -y\n"})}),"\n",(0,s.jsx)(n.h2,{id:"installing-docker-on-ubuntu",children:"Installing Docker on Ubuntu"}),"\n",(0,s.jsx)(n.h3,{id:"step-1--update-packages",children:"Step 1 \u2014 Update Packages"}),"\n",(0,s.jsx)(n.p,{children:"Update your existing list of packages:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"sudo apt update\n"})}),"\n",(0,s.jsx)(n.h3,{id:"step-2--install-prerequisite-packages",children:"Step 2 \u2014 Install Prerequisite Packages"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"sudo apt install apt-transport-https ca-certificates curl software-properties-common\n"})}),"\n",(0,s.jsx)(n.h3,{id:"step-3--add-docker-gpg-key",children:"Step 3 \u2014 Add Docker GPG Key"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg\n"})}),"\n",(0,s.jsx)(n.h3,{id:"step-4--add-docker-repository",children:"Step 4 \u2014 Add Docker Repository"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null\n'})}),"\n",(0,s.jsx)(n.h3,{id:"step-5--update-package-list-again",children:"Step 5 \u2014 Update Package List Again"}),"\n",(0,s.jsx)(n.p,{children:"Update your package list to include the new Docker repository:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"sudo apt update\n"})}),"\n",(0,s.jsx)(n.h3,{id:"step-6--install-docker",children:"Step 6 \u2014 Install Docker"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"sudo apt install docker-ce\n"})}),"\n",(0,s.jsx)(n.h3,{id:"step-7--verify-docker-installation",children:"Step 7 \u2014 Verify Docker Installation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"sudo systemctl status docker\n"})}),"\n",(0,s.jsx)(n.p,{children:"You should see output similar to:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"3.png",src:t(1116).A+"",width:"1716",height:"781"})}),"\n",(0,s.jsx)(n.h3,{id:"install-docker-compose",children:"Install Docker Compose"}),"\n",(0,s.jsxs)(n.p,{children:["Docker Compose is a tool for defining and managing ",(0,s.jsx)(n.strong,{children:"multi-container Docker applications"})," using a single YAML file (",(0,s.jsx)(n.code,{children:"docker-compose.yml"}),"). It simplifies running, configuring, and linking multiple containers as a single service."]}),"\n",(0,s.jsx)(n.p,{children:"To install Docker Compose on Ubuntu:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"sudo apt install docker-compose -y\n"})}),"\n",(0,s.jsx)(n.h1,{id:"-hospital-demo-lab-setup",children:"\ud83c\udfe5 Hospital Demo Lab Setup"}),"\n",(0,s.jsxs)(n.p,{children:["This guide will walk you through creating a ",(0,s.jsx)(n.strong,{children:"PHP demo application"}),", setting up ",(0,s.jsx)(n.strong,{children:"Docker + Docker Compose"}),", and running the full environment including MySQL and phpMyAdmin."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"1-create-the-project-directory",children:"1. Create the Project Directory"}),"\n",(0,s.jsx)(n.p,{children:"Create a folder for your project:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"mkdir hospital-lab\ncd hospital-lab\n"})}),"\n",(0,s.jsx)(n.p,{children:"Inside this folder, create a src/ directory for your PHP source code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"mkdir src\n"})}),"\n",(0,s.jsx)(n.h2,{id:"2-create-the-php-index-file",children:"2. Create the PHP Index File"}),"\n",(0,s.jsx)(n.p,{children:"Create a file index.php inside src/:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"<?php\n\n// Database connection parameters\n$host = 'mysql_db'; \n$dbname = 'your_database_name';\n$username = 'your_username';\n$password = 'your_password';\n\ntry {\n    // Create a new PDO instance\n    $pdo = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);\n\n    // Set PDO error mode to exception\n    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n    echo \"Database connection successful!\";\n} catch (PDOException $e) {\n    // Catch any PDO exceptions and display an error message\n    echo \"Database connection failed: \" . $e->getMessage();\n}\n\n?>\n"})}),"\n",(0,s.jsx)(n.p,{children:"This will be the landing page for the demo application and test the connection with the database"}),"\n",(0,s.jsx)(n.h2,{id:"3-create-the-php-dockerfile",children:"3. Create the PHP Dockerfile"}),"\n",(0,s.jsx)(n.p,{children:"In the project root (same level as src/), create a file named Dockerfile with the following content:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dockerfile",children:"# Use official PHP with Apache\nFROM php:8.2-apache\n\n# Install necessary PHP extensions and cleanup\nRUN apt-get update && \\\n    apt-get install -y libzip-dev libicu-dev && \\\n    docker-php-ext-install pdo pdo_mysql mysqli opcache intl zip && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/*\n\n# Copy application source into the container\nCOPY src/ /var/www/html/\n\n# Set working directory\nWORKDIR /var/www/html/\n\n# Expose port 80 for web access\nEXPOSE 80\n"})}),"\n",(0,s.jsx)(n.h2,{id:"4-create-the-env-file",children:"4. Create the .env File"}),"\n",(0,s.jsx)(n.p,{children:"Create a .env file in the project root with the following content:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dotenv",children:"# MySQL configuration\nMYSQL_ROOT_PASSWORD=root_pwd\nMYSQL_DATABASE=app_db\nMYSQL_USER=db_user\nMYSQL_PASSWORD=db_user_pwd\n\n# phpMyAdmin configuration\nPMA_HOST=db\nPMA_PORT=3306\nPMA_ARBITRARY=1\n\n# Ports\nDB_PORT=3306\nPHPMYADMIN_PORT=8081\n"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"This file allows Docker Compose to read configuration variables for MySQL and phpMyAdmin."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"5-create-the-docker-composeyml-file",children:"5. Create the docker-compose.yml File"}),"\n",(0,s.jsx)(n.p,{children:"In the project root, create docker-compose.yml:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"services:\n  # The Database Service\n  mysql_db:\n    image: mysql:latest\n    container_name: mysql_db\n    environment:\n      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}\n      MYSQL_DATABASE: ${MYSQL_DATABASE}\n      MYSQL_USER: ${MYSQL_USER}\n      MYSQL_PASSWORD: ${MYSQL_PASSWORD}\n    ports:\n      - \"${DB_PORT}:3306\"\n    volumes:\n      - dbdata:/var/lib/mysql\n\n  # The PHP Application Service\n  app:\n    # Use 'build' to tell Docker Compose to look for the Dockerfile in the current directory\n    build: .\n    container_name: php_app\n    ports:\n      - \"8080:80\" # Maps host port 80 to container port 80\n    # Links the 'app' container to the 'db' container\n    depends_on:\n      - mysql_db\n    # Mounts your local 'src' directory into the container's web root.\n    # This allows you to modify code on your host machine and see changes instantly.\n    volumes:\n      - ./src/:/var/www/html/\n\n  # The phpMyAdmin Service\n  phpmyadmin:\n    image: phpmyadmin/phpmyadmin\n    container_name: pma\n    # The 'links' directive is legacy; 'depends_on' is preferred for ordering.\n    # The database connection still works via the hostname 'db'.\n    depends_on:\n      - mysql_db\n    environment:\n      # Use the service name 'db' as the host, not PMA_HOST\n      PMA_HOST: mysql_db \n      PMA_PORT: 3306 # The internal port of the db service\n      PMA_ARBITRARY: ${PMA_ARBITRARY}\n    restart: always\n    ports:\n      - \"${PHPMYADMIN_PORT}:80\"\n\nvolumes:\n  dbdata:\n"})}),"\n",(0,s.jsx)(n.h3,{id:"6-launch-the-environment",children:"6. Launch the Environment"}),"\n",(0,s.jsx)(n.p,{children:"Run Docker Compose from the project root:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"docker-compose up -d\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"-d runs the containers in detached mode."}),"\n",(0,s.jsx)(n.li,{children:"Docker will build the PHP image, pull MySQL and phpMyAdmin images, and start all services."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"7-verify-the-setup",children:"7. Verify the Setup"}),"\n",(0,s.jsxs)(n.p,{children:["PHP demo app: Open ",(0,s.jsx)(n.a,{href:"http://localhost:8080",children:"http://localhost:8080"}),"\nin your browser. You should see:"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"Welcome to the Hospital Demo App"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["phpMyAdmin: Open ",(0,s.jsx)(n.a,{href:"http://localhost:8080",children:"http://localhost:8080"}),"\n(or your PHPMYADMIN_PORT). Login with:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Server: mysql_db"}),"\n",(0,s.jsx)(n.li,{children:"Username: root or user"}),"\n",(0,s.jsx)(n.li,{children:"Password: from .env file"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"8-stop-and-clean-up",children:"8. Stop and Clean Up"}),"\n",(0,s.jsx)(n.p,{children:"Stop all containers:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"docker-compose down\n"})}),"\n",(0,s.jsx)(n.p,{children:"Remove containers, networks, and volumes (if you want a fresh start):"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"docker-compose down -v\n"})}),"\n",(0,s.jsx)(n.h2,{id:"9-create-the-database-and-dummy-data-for-testing",children:"9. Create the database and dummy data for testing"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"CREATE DATABASE IF NOT EXISTS hospital_emr CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\nUSE hospital_emr;\n\nCREATE TABLE roles (\n                       id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n                       name VARCHAR(50) NOT NULL UNIQUE,\n                       description VARCHAR(255),\n                       created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\n\nCREATE TABLE users (\n                       id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n                       role_id INT UNSIGNED,\n                       email VARCHAR(255) NOT NULL UNIQUE,\n                       password_hash VARCHAR(255) NOT NULL,\n                       full_name VARCHAR(255) NOT NULL,\n                       phone VARCHAR(50),\n                       is_active TINYINT(1) DEFAULT 1,\n                       created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n                       updated_at TIMESTAMP NULL DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP,\n                       FOREIGN KEY (role_id) REFERENCES roles(id) ON DELETE SET NULL\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\n\nCREATE TABLE patients (\n                          id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n                          medical_record_number VARCHAR(100) NOT NULL UNIQUE,\n                          first_name VARCHAR(150) NOT NULL,\n                          last_name VARCHAR(150) NOT NULL,\n                          dob DATE,\n                          gender ENUM('male','female','other') DEFAULT 'other',\n                          phone VARCHAR(50),\n                          email VARCHAR(255),\n                          address TEXT,\n                          emergency_contact_name VARCHAR(255),\n                          emergency_contact_phone VARCHAR(50),\n                          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n                          updated_at TIMESTAMP NULL DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\n\nCREATE TABLE appointments (\n                              id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n                              patient_id BIGINT UNSIGNED NOT NULL,\n                              clinician_id BIGINT UNSIGNED,\n                              scheduled_at DATETIME NOT NULL,\n                              status ENUM('scheduled','cancelled','completed','no_show') DEFAULT 'scheduled',\n                              reason VARCHAR(255),\n                              created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n                              updated_at TIMESTAMP NULL DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP,\n                              FOREIGN KEY (patient_id) REFERENCES patients(id) ON DELETE CASCADE,\n                              FOREIGN KEY (clinician_id) REFERENCES users(id) ON DELETE SET NULL,\n                              INDEX (patient_id),\n                              INDEX (clinician_id),\n                              INDEX (scheduled_at)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\n\nCREATE TABLE medical_notes (\n                               id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n                               patient_id BIGINT UNSIGNED NOT NULL,\n                               author_id BIGINT UNSIGNED NOT NULL,\n                               appointment_id BIGINT UNSIGNED,\n                               note_text MEDIUMTEXT NOT NULL,\n                               note_type VARCHAR(100),\n                               created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n                               updated_at TIMESTAMP NULL DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP,\n                               FOREIGN KEY (patient_id) REFERENCES patients(id) ON DELETE CASCADE,\n                               FOREIGN KEY (author_id) REFERENCES users(id) ON DELETE CASCADE,\n                               FOREIGN KEY (appointment_id) REFERENCES appointments(id) ON DELETE SET NULL,\n                               FULLTEXT KEY ft_note_text (note_text(1000))\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\n\nCREATE TABLE lab_results (\n                             id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n                             patient_id BIGINT UNSIGNED NOT NULL,\n                             ordered_by_id BIGINT UNSIGNED,\n                             performed_by_id BIGINT UNSIGNED,\n                             appointment_id BIGINT UNSIGNED,\n                             test_code VARCHAR(100) NOT NULL,\n                             result_text MEDIUMTEXT,\n                             result_value VARCHAR(255),\n                             result_unit VARCHAR(50),\n                             status ENUM('ordered','in_progress','completed','amended','cancelled') DEFAULT 'ordered',\n                             recorded_at TIMESTAMP NULL,\n                             created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n                             updated_at TIMESTAMP NULL DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP,\n                             FOREIGN KEY (patient_id) REFERENCES patients(id) ON DELETE CASCADE,\n                             FOREIGN KEY (ordered_by_id) REFERENCES users(id) ON DELETE SET NULL,\n                             FOREIGN KEY (performed_by_id) REFERENCES users(id) ON DELETE SET NULL,\n                             FOREIGN KEY (appointment_id) REFERENCES appointments(id) ON DELETE SET NULL,\n                             INDEX (patient_id),\n                             INDEX (test_code),\n                             INDEX (status)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\n\nCREATE TABLE billing (\n                         id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n                         patient_id BIGINT UNSIGNED NOT NULL,\n                         appointment_id BIGINT UNSIGNED,\n                         amount DECIMAL(12,2) NOT NULL DEFAULT 0.00,\n                         currency VARCHAR(10) DEFAULT 'USD',\n                         status ENUM('pending','paid','cancelled','adjusted') DEFAULT 'pending',\n                         description VARCHAR(512),\n                         created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n                         updated_at TIMESTAMP NULL DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP,\n                         FOREIGN KEY (patient_id) REFERENCES patients(id) ON DELETE CASCADE,\n                         FOREIGN KEY (appointment_id) REFERENCES appointments(id) ON DELETE SET NULL,\n                         INDEX (patient_id),\n                         INDEX (status)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\n\nCREATE TABLE files (\n                       id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n                       patient_id BIGINT UNSIGNED,\n                       uploaded_by_id BIGINT UNSIGNED,\n                       appointment_id BIGINT UNSIGNED,\n                       filename VARCHAR(512) NOT NULL,\n                       mime_type VARCHAR(255),\n                       file_size BIGINT UNSIGNED,\n                       storage_path VARCHAR(1024),\n                       checksum VARCHAR(128),\n                       created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n                       FOREIGN KEY (patient_id) REFERENCES patients(id) ON DELETE SET NULL,\n                       FOREIGN KEY (uploaded_by_id) REFERENCES users(id) ON DELETE SET NULL,\n                       FOREIGN KEY (appointment_id) REFERENCES appointments(id) ON DELETE SET NULL,\n                       INDEX (patient_id),\n                       INDEX (uploaded_by_id)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\n\nCREATE TABLE audit_logs (\n                            id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n                            user_id BIGINT UNSIGNED,\n                            patient_id BIGINT UNSIGNED,\n                            action VARCHAR(100) NOT NULL,\n                            object_type VARCHAR(100),\n                            object_id VARCHAR(255),\n                            details JSON,\n                            ip_address VARCHAR(45),\n                            user_agent VARCHAR(512),\n                            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n                            FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE SET NULL,\n                            FOREIGN KEY (patient_id) REFERENCES patients(id) ON DELETE SET NULL,\n                            INDEX (user_id),\n                            INDEX (patient_id),\n                            INDEX (action),\n                            INDEX (created_at)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\n\nCREATE TABLE sessions (\n                          id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n                          user_id BIGINT UNSIGNED NOT NULL,\n                          session_token CHAR(128) NOT NULL UNIQUE,\n                          ip_address VARCHAR(45),\n                          user_agent VARCHAR(512),\n                          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n                          expires_at TIMESTAMP NULL,\n                          revoked TINYINT(1) DEFAULT 0,\n                          FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,\n                          INDEX (user_id),\n                          INDEX (expires_at)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\n\n\n\n\nINSERT INTO roles (name, description, created_at) VALUES\n                                                      ('admin', 'Administrator', NOW()),\n                                                      ('doctor', 'Doctor', NOW()),\n                                                      ('nurse', 'Nurse', NOW());\n\nINSERT INTO users (role_id, email, password_hash, full_name, phone, is_active, created_at, updated_at) VALUES\n                                                                                                           (1, 'admin@lab.local\n', '$2y$10$ABCDEFGHexamplehashadmin1234567890', 'Lab Admin', '+212600000001', 1, NOW(), NOW()),\n                                                                                                           (2, 'doc.alice@lab.local\n', '$2y$10$ABCDEFGHexamplehashdoc1234567890', 'Dr. Alice', '+212600000002', 1, NOW(), NOW()),\n                                                                                                           (3, 'nurse.bob@lab.local\n', '$2y$10$ABCDEFGHexamplehashnurse123456789', 'Nurse Bob', '+212600000003', 1, NOW(), NOW());\n\nINSERT INTO patients (medical_record_number, first_name, last_name, dob, gender, phone, email, address, emergency_contact_name, emergency_contact_phone, created_at, updated_at) VALUES\n                                                                                                                                                                                     ('MRN0001','John','Doe','1980-01-01','male','+212610000001','john.doe@example.local\n','123 Main St, City','Jane Doe','+212610000009', NOW(), NOW()),\n                                                                                                                                                                                     ('MRN0002','Jane','Smith','1990-05-05','female','+212610000002','jane.smith@example.local\n','45 Oak Ave, City','John Smith','+212610000010', NOW(), NOW()),\n                                                                                                                                                                                     ('MRN0003','Sam','Brown','1975-07-20','male','+212610000003','sam.brown@example.local\n','78 Pine Rd, City','Sara Brown','+212610000011', NOW(), NOW());\n\nINSERT INTO appointments (patient_id, clinician_id, scheduled_at, status, reason, created_at, updated_at) VALUES\n                                                                                                              (1, 2, '2025-09-01 09:00:00', 'completed', 'General consultation', NOW(), NOW()),\n                                                                                                              (2, 2, '2025-09-02 11:30:00', 'completed', 'Blood test', NOW(), NOW()),\n                                                                                                              (3, 3, '2025-09-03 14:00:00', 'scheduled', 'Follow-up', NOW(), NOW());\n\nINSERT INTO medical_notes (patient_id, author_id, appointment_id, note_text, note_type, created_at, updated_at) VALUES\n                                                                                                                    (1, 2, 1, 'Patient reports mild headache for 2 days. Vitals stable. Recommending paracetamol and rest.', 'consultation', NOW(), NOW()),\n                                                                                                                    (2, 2, 2, 'Ordered CBC and lipid panel. Awaiting results.', 'order', NOW(), NOW()),\n                                                                                                                    (3, 3, 3, 'Follow-up scheduled. Check wound healing and vitals.', 'followup', NOW(), NOW());\n\nINSERT INTO lab_results (patient_id, ordered_by_id, performed_by_id, appointment_id, test_code, result_text, result_value, result_unit, status, recorded_at, created_at, updated_at) VALUES\n                                                                                                                                                                                         (2, 2, 3, 2, 'CBC-001', 'CBC normal. WBC: 6.2, RBC: 4.7', 'WBC=6.2;RBC=4.7', '', 'completed', NOW(), NOW(), NOW()),\n                                                                                                                                                                                         (1, 2, 3, 1, 'GLU-001', 'Fasting glucose 95 mg/dL', '95', 'mg/dL', 'completed', NOW(), NOW(), NOW());\n\nINSERT INTO billing (patient_id, appointment_id, amount, currency, status, description, created_at, updated_at) VALUES\n                                                                                                                    (1, 1, 150.00, 'USD', 'pending', 'Consultation fee', NOW(), NOW()),\n                                                                                                                    (2, 2, 250.00, 'USD', 'paid', 'Blood test and lab fees', NOW(), NOW()),\n                                                                                                                    (3, 3, 75.00, 'USD', 'pending', 'Follow-up visit', NOW(), NOW());\n\nINSERT INTO files (patient_id, uploaded_by_id, appointment_id, filename, mime_type, file_size, storage_path, checksum, created_at) VALUES\n                                                                                                                                       (1, 2, 1, 'xray_john_doe_20250901.pdf', 'application/pdf', 245678, '/storage/patient_1/xray_john_doe_20250901.pdf', 'sha256:examplechecksum1', NOW()),\n                                                                                                                                       (2, 3, 2, 'cbc_result_jane_20250902.pdf', 'application/pdf', 123456, '/storage/patient_2/cbc_result_jane_20250902.pdf', 'sha256:examplechecksum2', NOW());\n\nINSERT INTO audit_logs (user_id, patient_id, action, object_type, object_id, details, ip_address, user_agent, created_at) VALUES\n                                                                                                                              (2, 1, 'view_patient', 'patient', '1', JSON_OBJECT('note','Viewed patient record from web UI'), '127.0.0.1', 'Mozilla/5.0 (lab)', NOW()),\n                                                                                                                              (2, 2, 'view_billing', 'billing', '2', JSON_OBJECT('note','Viewed billing record for patient 2'), '127.0.0.1', 'Mozilla/5.0 (lab)', NOW());\n\nINSERT INTO sessions (user_id, session_token, ip_address, user_agent, created_at, expires_at, revoked) VALUES\n                                                                                                           (2, 'sessiontoken_example_doc_alice_1', '127.0.0.1', 'Mozilla/5.0 (lab)', NOW(), DATE_ADD(NOW(), INTERVAL 2 HOUR), 0),\n                                                                                                           (1, 'sessiontoken_example_admin_1', '127.0.0.1', 'Mozilla/5.0 (lab)', NOW(), DATE_ADD(NOW(), INTERVAL 2 HOUR), 0);\n"})})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>l});var i=t(6540);const s={},a=i.createContext(s);function r(e){const n=i.useContext(a);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);